{"root":{"data":{"id":"c4jliyc593s0","created":1596075447652,"text":"对象和函数"},"children":[{"data":{"id":"c4jxi20awls0","created":1596109230615,"text":"对象","note":"对象也是一种数据的集合，键值对。"},"children":[{"data":{"id":"c4jxjam0szs0","created":1596109327689,"text":"1.初始化","note":null},"children":[{"data":{"id":"c4jxjpla9hs0","created":1596109360296,"text":"1.字面量","note":"对象字面量是以{}作为边界，以多个键值对组成，键与值通过：隔开，键值对之间通过，隔开\nvar obj = {name:\"terry\",age:12,gender:\"male\"}"},"children":[]},{"data":{"id":"c4jxjqcvjcw0","created":1596109361965,"text":"2.构造函数模式","note":"使用Object系统内置的对象构造函数，也可以使用自定义构造函数Student\nvar obj = new Object();//var obj ={}\n\nJAVA中：\n\tobj 是对象，也被称为实例\n    Object是类，也被称为构造函数，构\t\t造函数是创建对象的模板\n    \n    对象的值保存在堆区\n    对象的引用保存在栈区"},"children":[]}]},{"data":{"id":"c4jxpyuqg9k0","created":1596109850644,"text":"2.属性访问"},"children":[{"data":{"id":"c4jxq2liql40","created":1596109858794,"text":"1.点访问","note":"var obj = {name:\"terry\",age:12,gender:\"male\"}\n对象.属性\nvar name = obj.name;\nobj.name = 'terry';"},"children":[]},{"data":{"id":"c4jxq5gkg6w0","created":1596109865025,"text":"2.中括号访问","note":"对象【变量】\nvar name = \"age\";\nobj[name]//等价于obj【\"age\"】等价于obj.age;"},"children":[]}]},{"data":{"id":"c4n55s9ep680","created":1596435517759,"text":"3.Object"},"children":[{"data":{"id":"c4n5624wq7c0","created":1596435539255,"text":"Object.prototype.constructor//查询对象的构造函数","note":"console.log(obj.contructor());//[Function:Object]"},"children":[]},{"data":{"id":"c4n56n5dggo0","created":1596435584996,"text":"Object.prototype.toString","note":"var obj = {\n\tname:\"terry\",\n    age:12\n}\nconsole.log(obj.toString());//[object Object]\nconsole.log(JSON.stringify(obj));//转换为json字符串'{}'"},"children":[]},{"data":{"id":"c4n56w6m2bk0","created":1596435604662,"text":"Object.prototype.valueOf//获取某个对象的数值描述","note":"console.log(obj.valueOf());//{name:'terry',age : 12}"},"children":[]},{"data":{"id":"c4n570jx6k80","created":1596435614174,"text":"Object.prototype.hasOwnProperty//返回一个布尔值，表示某个对象是否含有指定的属性","note":"console.log(obj.hasOwnProperty('name'))//查询该对象是否拥有该属性(可调用的不属于它自己的)"},"children":[]},{"data":{"id":"c4n58ffbcfc0","created":1596435724911,"text":"Object.prototype.isPrototypeOf//返回一个布尔值，表示指定的对象是否在本对象的原型链中"},"children":[]},{"data":{"id":"c4ncdesopuo0","created":1596455863133,"text":"Object.prototype.propertyIsEnumerable//该属性是否可以枚举,即能否通过for-in打印","note":"console.log(obj.propertyIsEnumerable('name'))//true\n\nconsole.log(obj.propertyIsEnumerable('toString'))//false\n\nconsole.log(obj.propertyIsEnumerable('length'))//fals"},"children":[]},{"data":{"id":"c4ncpqm5u1s0","created":1596456829230,"text":"Object.protype.toSource//"},"children":[]},{"data":{"id":"c4ndzfp28j40","created":1596460410212,"text":"#Object.defineProperty(obj,\"name\",{})","note":"Object.defineProperty(obj,\"name\",{\n\tconfigurable:true,\n    writable:true,\n    enumerable:true;\n    value:\"terry\"\n});\n//给obj定义name属性的自定义值\n\nObject.defineProperty(obj,\"name\",{\n\tconfigurable:true,\n    writable:true,\n    enumerable:false;\n    value:\"terry\"\n});\n//{}\n不可以将name迭代打印出来\n尝试证明：\nfor(var k in obj){\n\tconsole.log(k,obj[k]);\n}//空\nconsole.log(obj.name);//terry依旧能访问到，但是不可以迭代打印出来"},"children":[]}]},{"data":{"id":"c4jxzlivvi00","created":1596110605271,"text":"3.属性遍历","note":"打印出某个对象中的所有属性\n\nfor-in\nfor(var key in obj){\n\tconsole.log(key,arr[key]);\n}\n//0 terry\n  1 larry\n  2 jacky\n\n依次从obj中获取属性名赋值给key，通过obj[key]\n(点访问一般会直接到某个属性，而中括号访问则会根据变量访问该变量所指向的常量)","color":"#c00000"},"children":[{"data":{"id":"c4jy0bp07co0","created":1596110662237,"text":"1.for"},"children":[]},{"data":{"id":"c4jy0ei8sq80","created":1596110668359,"text":"2.while"},"children":[]},{"data":{"id":"c4jy0hiu6ow0","created":1596110674925,"text":"3.do-while"},"children":[]}]},{"data":{"id":"c4nc0pjdl4w0","created":1596454867780,"text":"4.序列化"},"children":[{"data":{"id":"c4nc2nvrmv40","created":1596455020904,"text":"1.什么叫序列化"},"children":[{"data":{"id":"c4nc2sslvgo0","created":1596455031597,"text":"将内存中的对象转换成字符串的描述"},"children":[]}]},{"data":{"id":"c4nc4ifwvi00","created":1596455165790,"text":"2.为什么要序列化"},"children":[{"data":{"id":"c4nc4llcl6g0","created":1596455172649,"text":"方便网络传输（IO流）"},"children":[]}]}]},{"data":{"id":"c4ndmvh47js0","created":1596459425826,"text":"5.自定义属性"},"children":[{"data":{"id":"c4ndopyqlsw0","created":1596459570559,"text":"1.name是可以迭代的，是可读可写"},"children":[]},{"data":{"id":"c4ndp1o8d0g0","created":1596459596045,"text":"2.name是不可以迭代的"},"children":[]},{"data":{"id":"c4ndp69pwio0","created":1596459606052,"text":"3.name是不可写的"},"children":[]}]},{"data":{"id":"c4ndpht9w3c0","created":1596459631179,"text":"6.删除属性"},"children":[{"data":{"id":"c4ndpm1nf8g0","created":1596459640392,"text":"对比java对象，js对象有哪些特殊的地方"},"children":[{"data":{"id":"c4ndpxeqgzc0","created":1596459665128,"text":"1.js对象的属性可以被删除，java对象属性是固定的"},"children":[]},{"data":{"id":"c4ndq8pp7080","created":1596459689736,"text":"2.js对象的属性可以随意添加，java对象属性是固定的"},"children":[]},{"data":{"id":"c4ndrj5wneo0","created":1596459790848,"text":"3.js对象可以通过字面量及构造函数来获取，java对象只能通过类构建"},"children":[]}]}]},{"data":{"id":"c4necem9hnc0","created":1596461426600,"text":"7.自定义函数属性详解","note":"var obj = {\n\t_age:0,\n    name:\"terry\"\n}\n\n\nObject.defineProperty(obj,\"age\",{\n\tconfigurable:true,\n    enumerable:true,\n    set:function(v){\n    \tconsole.log('过生日...')；\n        this._age = v;\n    },\n    get:function{\n    \treturn this._age;\n    }\n})\nobj.age = 1;\nage++;\nage++;\nage++;\nage++;\nage++;\nconsole.log(obj.age);\n//通过调用函数，改变age的属性，使得可以监控age的变化"},"children":[{"data":{"id":"c4nesf9doj40","created":1596462681825,"text":"VUE前瞻，对多种属性的定义_data"},"children":[]}]}]},{"data":{"id":"c4new6zgkp40","created":1596462977267,"text":"函数"},"children":[{"data":{"id":"c4newe6dro00","created":1596462992923,"text":"1.分类","note":"不管是普通函数还是构造函数，本质是完全一样的，只不过为了区分它们，我们将构造函数的函数名大写"},"children":[{"data":{"id":"c4newgs88ug0","created":1596462998598,"text":"1.普通函数（方法）"},"children":[]},{"data":{"id":"c4newujj3qo0","created":1596463028547,"text":"2.构造函数（类）"},"children":[]}]},{"data":{"id":"c4nexk05ouw0","created":1596463083972,"text":"2.函数定义"},"children":[{"data":{"id":"c4nexmfitvk0","created":1596463089254,"text":"1.函数声明 \n   函数名();\n   function 函数名(形参){};","note":"函数声明与var声明变量类似，都会有变量的提升。允许在函数声明前调用函数\n\n例如：\nlet result = add(1,2);\nfunction add(a,b){\n\treturn a+b;\n}"},"children":[]},{"data":{"id":"c4nexoctbds0","created":1596463093444,"text":"2.函数表达式","note":"类似于普通的赋值表达式，变量会提升，但是函数初始化不会被提升\n\n//错误示范：\nadd();\nvar add = function(a,b){\n\treturn a+b;\n}//同等变换为下面这个：\nvar add;//undefined\nadd();\nadd = function(a,b){\n\treturn a+b;\n}//变量提升之后，不可以调用undefined，所以错误"},"children":[]}]},{"data":{"id":"c4o5zhdf8qg0","created":1596539404939,"text":"3.函数调用"},"children":[{"data":{"id":"c4o5zrenvg80","created":1596539426782,"text":"1.函数名(实参列表)；"},"children":[]},{"data":{"id":"c4o5zxt60vs0","created":1596539440720,"text":"2.函数名.call(this,实参列表)"},"children":[]},{"data":{"id":"c4o6073rn4w0","created":1596539460952,"text":"3.函数名.apply(this,实参数组)"},"children":[]}]},{"data":{"id":"c4o6xppozy00","created":1596542087477,"text":"4.其他内置函数"},"children":[{"data":{"id":"c4o6yanjxwg0","created":1596542133060,"text":"#自己编写四舍五入函数","note":"function foo(num){\n\tvar arr =String(num).split('.');//根据小数点间隔将整数和小数分开\n    console.log(arr)\n    var xs= parseFloat('0.'+arr[1]);//加‘0’之后arr[1]会变为字符串，无法进行比大小，所以应该转换为浮点数字\n    console.log(xs);\n    var zs=parseInt(arr[0]);\n    if(xs>=0.5){\n    \treturn zs+1;\n    }else{\n    \treturn zs;\t\n    }\n    \n    \n}\n//var num =readline();//需要安装第三方库\nlet result = foo(3.2221);\nconsole.log(result);"},"children":[]},{"data":{"id":"c4o6xyineg00","created":1596542106642,"text":"String"},"children":[{"data":{"id":"c4o74cvph5k0","created":1596542608092,"text":"1.String.prototype.split()","note":"将字符串根据指定参数进行切割，返回一个数组"},"children":[]}]}]}]}]},"template":"default","theme":"fresh-blue","version":"1.4.43"}